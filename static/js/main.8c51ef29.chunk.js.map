{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","download","setDownload","URL","setURL","Name","setName","setType","console","log","className","action","method","placeholder","type","name","value","onChange","e","target","style","paddingTop","paddingBottom","handleSetType","holder","onClick","display","marginLeft","marginRight","width","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAkFeA,MA9Ef,WAAgB,IAAD,EACgBC,oBAAS,GADzB,mBACNC,EADM,KACGC,EADH,OAEMF,mBAAS,IAFf,mBAENG,EAFM,KAEFC,EAFE,OAGQJ,mBAAS,IAHjB,mBAGNK,EAHM,KAGDC,EAHC,OAIQN,mBAAS,IAJjB,mBAIDO,GAJC,WAuBb,OAjBAC,QAAQC,IAAIN,GAkBV,yBAAKO,UAAU,OACb,kDAEA,0BAAMC,OAAO,8CAA8CC,OAAO,OAElE,yBAAKF,UAAU,QACb,6BACE,2BACAG,YAAY,MACZC,KAAK,OACLC,KAAO,MACPC,MAAOb,EACPc,SAxBY,SAACC,GACnBd,EAAOc,EAAEC,OAAOH,WA2BZ,yBAAKI,MAAO,CAACC,WAAW,EAAEC,cAAc,IACtC,2BACFT,YAAY,gBACZC,KAAK,OACLC,KAAO,OACPC,MAAOX,EACPY,SA9Bc,SAACC,GACnBZ,EAAQY,EAAEC,OAAOH,WAgCb,6BACE,4BACMD,KAAK,OACLE,SAAU,SAACC,GAAD,OAhCJ,SAACA,GACnBX,EAAQW,EAAEC,OAAOH,OA+BYO,CAAcL,KAE/B,4BAAQF,MAAM,GAAGQ,OAAO,QAAxB,eAGA,4BAAQR,MAAM,OAAd,OAGA,4BAAQA,MAAM,SAAd,QAGA,4BAAQA,MAAM,UAAd,WAKE,KAAPb,GAAa,4BAAQsB,QAAS,WA3DrCvB,GAAaD,IA2D8Ca,KAAK,SAASE,MAAM,YAA3D,cAGlB,yBAAKI,MAAO,CAACM,QAAQ,QAAQC,WAAW,OAAOC,YAAY,OAAOC,MAAM,MAAMR,WAAW,KACvF,kBAAC,IAAD,CAAaS,IAAK3B,OChEN4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.8c51ef29.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport ReactPlayer from \"react-player\";\n\nfunction App() {\n  const [download,setDownload]=useState(false)\n  const [URL,setURL]=useState('')\n  const [Name,setName]=useState('')\n  const [Type,setType]=useState('')\n\n  console.log(URL)\n\n  const handleDownload=()=>{\n    setDownload(!download)\n  }\n\n  const handleSetUrl= (e)=>{\n    setURL(e.target.value)\n  }\n\n  const handleSetName=(e)=>{\n    setName(e.target.value)\n  }\n\n  const handleSetType=(e)=>{\n    setType(e.target.value)\n  }\n  return (\n    <div className=\"App\">\n      <h1>YOUTUBE DOWNLOADER</h1>\n\n      <form action=\"https://downloaderyt.herokuapp.com/download\" method=\"GET\"> \n      \n      <div className='form'>\n        <div>\n          <input\n          placeholder=\"URL\"\n          type=\"text\"\n          name = \"URL\"\n          value={URL}\n          onChange={handleSetUrl}\n          />\n        </div>\n\n        <div style={{paddingTop:5,paddingBottom:5}}>\n          <input\n        placeholder=\"Name Download\"\n        type=\"text\"\n        name = \"Name\"\n        value={Name}\n        onChange={handleSetName}\n        />\n        </div>\n        <div>\n          <select\n                name=\"Type\"\n                onChange={(e) => handleSetType(e)}\n              >\n                <option value=\"\" holder=\"true\">\n                  Select Type\n                </option>\n                <option value=\"mp3\">\n                  Mp3\n                </option>\n                <option value=\"small\">\n                  144p\n                </option>\n                <option value=\"hd1080\">\n                  1080p\n                </option>\n          </select>\n        </div>\n          {URL!== '' && <button onClick={()=>handleDownload()} type=\"submit\" value=\"Download\">Download</button>}\n        </div>\n      </form>\n      <div style={{display:'block',marginLeft:'auto',marginRight:'auto',width:'50%',paddingTop:20}}>\n        <ReactPlayer url={URL}/>\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}